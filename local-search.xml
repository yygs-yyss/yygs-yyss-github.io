<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>博客总结与反思</title>
    <link href="/2023/04/01/%E5%8D%9A%E5%AE%A2%E6%80%BB%E7%BB%93%E4%B8%8E%E5%8F%8D%E6%80%9D/"/>
    <url>/2023/04/01/%E5%8D%9A%E5%AE%A2%E6%80%BB%E7%BB%93%E4%B8%8E%E5%8F%8D%E6%80%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="记录第一次搭建博客"><a href="#记录第一次搭建博客" class="headerlink" title="记录第一次搭建博客"></a>记录第一次搭建博客</h1><h2 id="博客主题及其选取原因"><a href="#博客主题及其选取原因" class="headerlink" title="博客主题及其选取原因"></a>博客主题及其选取原因</h2><p>博客的主题是学习与生活，内容包括了技术总结、论文分享、生活随笔。我选择该主题也是想记录一下日常的学习到了那些知识，记录下生活的精彩瞬间。日后也会继续更新。</p><h2 id="博客页面布局"><a href="#博客页面布局" class="headerlink" title="博客页面布局"></a>博客页面布局</h2><p>博客页面主要有五个方面，首页、归档、分类、标签、关于，每个页面主体内容放在正中间，顶部放置背景图片，主题内容两侧根据不同页面有不同的设置，比如文章页面两侧就是文章标题和各段内容标题。</p><ul><li>首页：博客主体，每篇文章的简要介绍会在首页展示</li><li>归档：列出了每篇文章，及其撰写时间</li><li>分类：一共有三种类别，技术总结、论文分享、随笔，每篇文章都会有其划分类别，可以在分类中查看每种类别的文章</li><li>标签：每篇文章会有自定义的标签，这样可以更快的定位到需要的文章</li><li>关于：该页是我自己的介绍</li></ul><h2 id="博客搭建技术"><a href="#博客搭建技术" class="headerlink" title="博客搭建技术"></a>博客搭建技术</h2><p>本博客主要采用hexo框架 + markdown，并用git做版本控制。<br>具体搭建流程如下:</p><ol><li>实现要保证系统已经安装npm、git</li><li>安装hexo<ul><li>安装：<code>npm install -g hexo-cli</code></li></ul></li><li>布置简易hexo<ul><li><code>hexo init &lt;folder&gt;</code></li></ul></li><li>安装一些依赖包<ul><li><code>npm install</code></li></ul></li><li>更换主题<ul><li>将<code>_config.yml</code>配置文件中theme改为fluid</li></ul></li><li>hexo的一些常用命令<figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean <span class="hljs-comment">//用于清理缓存文件</span><br>hexo <span class="hljs-keyword">generate</span> <span class="hljs-comment">//用于生成静态文件</span><br>hexo server <span class="hljs-comment">//用于启动本地服务器</span><br>hexo deploy <span class="hljs-comment">//用于部署网站</span><br></code></pre></td></tr></table></figure></li></ol><p>这样就将基本博客搭建完成，可以在其中使用markdown格式写文章，也可以用简单的html、css修改样式，创建新页面。</p><h2 id="博客样式设计及其美学考量"><a href="#博客样式设计及其美学考量" class="headerlink" title="博客样式设计及其美学考量"></a>博客样式设计及其美学考量</h2><p>在使用hexo主题时，也是浏览了很多theme，最终选择了fluid主题样式，我觉着主要原因有以下几点：</p><ol><li>博客主题设计简洁，同时具有轻快的体验和优雅的颜值</li><li>博客结构清晰，可以方便的修改一些样式，并且可以根据自身喜好设计一些页面</li><li>页面整体是上下结构，下方页面再细分左、中、右三个模块，这样的设计很符合美学考量</li></ol><h2 id="遇到的困难"><a href="#遇到的困难" class="headerlink" title="遇到的困难"></a>遇到的困难</h2><ol><li>对git工具不够熟悉，通过本次博客搭建也进一步熟悉了git的使用，具体可看博客文章</li><li>在安装hexo时，npm和node版本没有对应，导致<code>npm install</code>时一直出错，会遇到很多奇怪的错误，最后才发现是版本问题</li><li>第一次搭建博客，对hexo框架不够熟悉，在写文章时，不会使用其已经实现的功能，想要添加一些样式和内容是会与原有样式冲突。</li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git使用总结</title>
    <link href="/2023/04/01/git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <url>/2023/04/01/git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="在工作中常用的操作"><a href="#在工作中常用的操作" class="headerlink" title="在工作中常用的操作"></a>在工作中常用的操作</h2><h3 id="1-初始化与拉取"><a href="#1-初始化与拉取" class="headerlink" title="1. 初始化与拉取"></a>1. 初始化与拉取</h3><ul><li>git init: 在某一文件夹下执行此命令，就会创建.git目录，git仓库也就创建好了</li><li>git clone 拉取远程仓库代码，默认同名拉取，如果需要重命名，可以使用git clone [url] [new_name]</li></ul><h3 id="2-基本的快照"><a href="#2-基本的快照" class="headerlink" title="2. 基本的快照"></a>2. 基本的快照</h3><ul><li>基本流程：<ol><li>git add：可以添加多个文件，文件路径后面叠加即可git add [file_path…]，不一定要git add . (此操作会递归的将当前文件夹下所有文件add一下)这样可能会把不需要的文件提交到远程仓库，file_path可以通过git status查看</li><li>git status查看当前状态，红色的是未add到缓存的，绿色是已经add但是未commit的</li><li>git diff</li></ol><ul><li>git diff没有其他参数直接使用此命令会显示所有未add 的更改（即红色部分的更改）</li><li>git diff –cached会显示已经add的尚未commit的更改（即绿色部分的更改）</li><li>git diff HEAD会显示所有改动（包括红色和绿色的更改）</li><li>git diff –stat简略显示哪些文件更改了，但不显示具体更改内容</li></ul><ol start="4"><li>git commit：add命令只会写入缓存，没有真正写入存储，commit会真正写入存储</li><li>首先要设置config，这些config就是每一条commit的基本信息，不要乱填<br>1. git config –global user.name ‘Your Name’<br>2. git config –global user.email you@email</li><li>git commit -m [“本次提交的简要信息”]</li></ol></li><li>其它常用方法：<ul><li>git reset<ul><li>git reset HEAD – [file_name]将当前已经add进缓存的file_name文件移出缓存</li><li>git reset [commit_no]可以回退到commit_no版本</li></ul></li><li>git rm</li></ul></li></ul><h3 id="3-分支与合并"><a href="#3-分支与合并" class="headerlink" title="3. 分支与合并"></a>3. 分支与合并</h3><ul><li>基本流程<ul><li>git branch<ul><li>git branch列出可用的分支，*号标记的分支就是当前分支</li><li>git branch [branch_name]创建叫branch_name的新分支</li></ul></li><li>git checkout<ul><li>git checkout [branch_name]切换到branch_name的分支</li><li>git checkout -b [branch_name]创建并切换到branch_name分支</li><li>git checkout -d [branch_name]删除分支</li></ul></li><li>git merge<ul><li>git merge [branch_name]将当前分支和branch_name分支合并</li></ul></li></ul></li></ul><h3 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h3><ul><li>git submodule</li></ul><h2 id="在工作中常用的场景"><a href="#在工作中常用的场景" class="headerlink" title="在工作中常用的场景"></a>在工作中常用的场景</h2><h3 id="取消当前修改的内容（还未add、commit）"><a href="#取消当前修改的内容（还未add、commit）" class="headerlink" title="取消当前修改的内容（还未add、commit）"></a>取消当前修改的内容（还未add、commit）</h3><ul><li>git checkout – file_name</li><li>git checkout .取消当前目录下所有修改内容</li></ul><h3 id="修改已经add的文件（还未commit）"><a href="#修改已经add的文件（还未commit）" class="headerlink" title="修改已经add的文件（还未commit）"></a>修改已经add的文件（还未commit）</h3><ul><li>git reset HEAD <file_name></li></ul><h3 id="修改已经commit的文件"><a href="#修改已经commit的文件" class="headerlink" title="修改已经commit的文件"></a>修改已经commit的文件</h3><ul><li>git reset <commit_number>回退版本</li></ul><h3 id="修改已经推到远程仓库的文件"><a href="#修改已经推到远程仓库的文件" class="headerlink" title="修改已经推到远程仓库的文件"></a>修改已经推到远程仓库的文件</h3><ul><li>git push -f修改后强制再推上去，-f 强制上推</li></ul><h3 id="提交MR之前需要rebase一下"><a href="#提交MR之前需要rebase一下" class="headerlink" title="提交MR之前需要rebase一下"></a>提交MR之前需要rebase一下</h3><ul><li>因为是多人合作编写代码，可能出现其它分支提前合入主分支，而你的分支没有加入这一部分代码</li><li>具体操作<ul><li>git pull origin clickhouse_service:clickhouse_service origin是所要拉取的git远程源clickhouse_service是主分支，此步骤就是将主分支更新为最新代码</li><li>git checkout &lt;当前要提交的分支名&gt;切回当前分支</li><li>git rebase clickhouse_servicereabse操作<ul><li>Rebase 操作，会分析两个分支共同祖先，然后从公共祖先一次往后将clickhouse_service每个提交节点与当前分支合并，直到合并到最后一个节点。<br><img src="/img/git-rebase.jpg" alt="git rebase"></li><li>每合并一个节点需要add、git rebase –continue</li></ul></li><li>执行命令之后，再提交MR操作，这样的好处是master分支上很清晰，不会有多余的commit提交记录（相比直接merge）<br>合并已经commit的节点</li></ul></li><li>git rebase -i HEAD~2将Head指向的最近的两个commit合并<ul><li>将不需要的commit前面的pick改为s或其它，具体可以看解释，pick代表保留当前，s代表合并到前一分支</li><li>将提交的信息修改统一</li><li>可能会产生冲突<ul><li>git status查看冲突，并进入冲突文件，解决冲突</li><li>git add &lt;文件名&gt; 添加解决冲突后的文件</li><li>git status确认已经无冲突</li><li>git rebase –continue</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>工作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ab压测工具</title>
    <link href="/2023/04/01/ab%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7/"/>
    <url>/2023/04/01/ab%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="1-压力测试是什么，为什么要用？"><a href="#1-压力测试是什么，为什么要用？" class="headerlink" title="1. 压力测试是什么，为什么要用？"></a>1. 压力测试是什么，为什么要用？</h2><ul><li>压力测试，是确立系统稳定性的一种测试方法。压力测试是针对特定系统或者组件所做的测试，目的是确认其稳定性。发现在什么条件下应用程序的性能会变得不可接受。比如说短时间内大量用户访问，可能造成服务器的压力太大导致服务崩溃。因此，对于我们的web server，我们有必要通过压力测试来评估是否能够承载预期的访问压力。</li><li>压力测试可以从以下几个维度评估：<ul><li>响应时间</li><li>并发用户数</li><li>吞吐量</li><li>资源利用率</li></ul></li><li>人工模拟压力测试显然不合适，这就需要借助工具了。最常见的web压测工具就是ab - apache benchmark</li></ul><h2 id="2-ab压测工具介绍"><a href="#2-ab压测工具介绍" class="headerlink" title="2. ab压测工具介绍"></a>2. ab压测工具介绍</h2><ul><li>ab是apachebench命令的缩写，ab命令会创建多个并发访问线程，模拟多个访问者同时对某一HTTP URL地址进行访问。</li><li>ab命令对发出负载的计算机要求很低，它既不会占用很高CPU，也不会占用很多内存。但却会给目标服务器造成巨大的负载，其原理类似CC攻击。</li></ul><h2 id="3-安装ab"><a href="#3-安装ab" class="headerlink" title="3. 安装ab"></a>3. 安装ab</h2><ul><li>Mac有自带Apache和ApacheBench，可以在终端使用ab -V查看。其它系统可以在官网下载。<br>[图片]</li></ul><h2 id="4-使用ab"><a href="#4-使用ab" class="headerlink" title="4. 使用ab"></a>4. 使用ab</h2><ul><li>ab - Apache HTTP server benchmarking tool详细说明文档</li><li>使用ab的格式<br>ab [ -A auth-username:password ] [ -b windowsize ] [ -B local-address ] [ -c concurrency ] [ -C cookie-name&#x3D;value ] [ -d ] [ -e csv-file ] [ -E client-certificate file ] [ -f protocol ] [ -g gnuplot-file ] [ -h ] [ -H custom-header ] [ -i ] [ -k ] [ -l ] [ -m HTTP-method ] [ -n requests ] [ -p POST-file ] [ -P proxy-auth-username:password ] [ -q ] [ -r ] [ -s timeout ] [ -S ] [ -t timelimit ] [ -T content-type ] [ -u PUT-file ] [ -v verbosity] [ -V ] [ -w ] [ -x <table>-attributes ] [ -X proxy[:port] ] [ -y <tr>-attributes ] [ -z <td>-attributes ] [ -Z ciphersuite ] [http[s]:&#x2F;&#x2F;]hostname[:port]&#x2F;path</li></ul><p>ab -c 100 -n 100 http</p><ul><li>常用参数介绍<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 常用参数设置</span><br><span class="hljs-string">-n</span> <span class="hljs-string">测试会话中所执行的请求个数,默认仅执行一个请求,如果不指定-t参数，默认执行完所有请求后自动结束压测</span><br><br><span class="hljs-string">-c</span> <span class="hljs-string">一次产生的请求个数,即同一时间发出多少个请求,默认为一次一个,此参数可以控制对服务器的单位时间内的并发量</span><br><br><span class="hljs-string">-t</span> <span class="hljs-string">测试所进行的最大秒数,默认为无时间限制....其内部隐含值是[-n</span> <span class="hljs-number">50000</span><span class="hljs-string">],它可以使对服务器的测试限制在一个固定的总时间以内,如果时间到了，请求个数还未执行完，也会被停止。</span><br><br><span class="hljs-string">-p</span> <span class="hljs-string">包含了需要POST的数据的文件,数据格式以接口请求参数定义的格式为准,eg.</span> <span class="hljs-string">xxx.json</span><br> <span class="hljs-comment">#json 内容示例： &#123;&quot;name&quot;:&quot;小明&quot;,&quot;sex&quot;:&quot;男&quot;&#125;</span><br><br><span class="hljs-string">-T</span> <span class="hljs-string">POST</span> <span class="hljs-string">数据所使用的Content-type头信息,指定请求参数格式，eg.</span> <span class="hljs-string">application/json</span><br> <br><span class="hljs-string">-r</span> <span class="hljs-string">在接口返回失败后，默认会终止压测，添加此参数后压测会继续进行</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">常用命令及输出结果分析</span><br><span class="hljs-comment"># 以每秒10个请求的速度对此接口进行访问，知道请求数达到1000个为止，忽略接口返回的错误信息</span><br><span class="hljs-string">ab</span> <span class="hljs-string">-n</span> <span class="hljs-number">1000</span> <span class="hljs-string">-c</span> <span class="hljs-number">10</span> <span class="hljs-string">-r</span> <span class="hljs-string">http://127.0.0.1:8000/data-resource/</span><br><br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-comment"># 基本信息</span><br><span class="hljs-attr">Server Software:</span>        <span class="hljs-string">WSGIServer/0.2</span><br><span class="hljs-attr">Server Hostname:</span>        <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br><span class="hljs-attr">Server Port:</span>            <span class="hljs-number">8000</span><br><br><span class="hljs-comment"># HTTP响应数据的正文长度</span><br><span class="hljs-attr">Document Path:</span>          <span class="hljs-string">/data-resource/</span><br><span class="hljs-attr">Document Length:</span>        <span class="hljs-number">1528 </span><span class="hljs-string">bytes</span><br><br><span class="hljs-attr">Concurrency Level:</span>      <span class="hljs-number">10</span> <span class="hljs-comment"># 并发用户数，这是我们设置的参数之一（-c）</span><br><span class="hljs-attr">Time taken for tests:</span>   <span class="hljs-number">30.257</span> <span class="hljs-string">seconds</span> <span class="hljs-comment"># 所有这些请求被处理完成所花费的总时间 单位秒</span><br><span class="hljs-attr">Complete requests:</span>      <span class="hljs-number">1000</span> <span class="hljs-comment"># 总请求数量</span><br><span class="hljs-attr">Failed requests:</span>        <span class="hljs-number">0</span> <span class="hljs-comment"># 表示失败的请求数量</span><br><span class="hljs-attr">Total transferred:</span>      <span class="hljs-number">1858000</span> <span class="hljs-string">bytes</span> <span class="hljs-comment"># 所有请求的响应数据长度总和。包括每个HTTP响应数据的头信息和正文数据的长度</span><br><span class="hljs-attr">HTML transferred:</span>       <span class="hljs-number">1528000</span> <span class="hljs-string">bytes</span> <span class="hljs-comment"># 所有请求的响应数据中正文数据的总和，也就是减去了Total transferred中HTTP响应数据中的头信息的长度</span><br><span class="hljs-attr">Requests per second:</span>    <span class="hljs-number">33.05</span> [<span class="hljs-comment">#/sec] (mean) # 平均每秒的请求数</span><br><span class="hljs-attr">Time per request:</span>       <span class="hljs-number">302.565</span> [<span class="hljs-string">ms</span>] <span class="hljs-string">(mean)</span> <span class="hljs-comment"># 所有并发用户(这里是10)都请求一次的平均时间</span><br><span class="hljs-attr">Time per request:</span>       <span class="hljs-number">30.257</span> [<span class="hljs-string">ms</span>] <span class="hljs-string">(mean</span>, <span class="hljs-string">across</span> <span class="hljs-string">all</span> <span class="hljs-string">concurrent</span> <span class="hljs-string">requests)</span> <span class="hljs-comment"># 单个用户请求一次的平均时间</span><br><span class="hljs-attr">Transfer rate:</span>          <span class="hljs-number">59.97</span> [<span class="hljs-string">Kbytes/sec</span>] <span class="hljs-string">received</span> <span class="hljs-comment"># 传输速率，单位：KB/s</span><br><br><span class="hljs-comment"># 一个请求的响应时间可以分成网络链接（Connect），系统处理（Processing）和等待（Waiting）三个部分。</span><br><span class="hljs-string">Connection</span> <span class="hljs-string">Times</span> <span class="hljs-string">(ms)</span><br>              <span class="hljs-string">min</span>  <span class="hljs-string">mean</span>[<span class="hljs-string">+/-sd</span>] <span class="hljs-string">median</span>   <span class="hljs-string">max</span> <span class="hljs-comment"># [+/-sd]表示标准差（Standard Deviation）</span><br><span class="hljs-attr">Connect:</span>        <span class="hljs-number">0</span>    <span class="hljs-number">0</span>   <span class="hljs-number">0.1</span>      <span class="hljs-number">0</span>       <span class="hljs-number">2</span><br><span class="hljs-attr">Processing:</span>   <span class="hljs-number">264</span>  <span class="hljs-number">299</span>  <span class="hljs-number">63.0</span>    <span class="hljs-number">287</span>    <span class="hljs-number">1340</span><br><span class="hljs-attr">Waiting:</span>      <span class="hljs-number">264</span>  <span class="hljs-number">297</span>  <span class="hljs-number">63.1</span>    <span class="hljs-number">285</span>    <span class="hljs-number">1340</span><br><span class="hljs-attr">Total:</span>        <span class="hljs-number">264</span>  <span class="hljs-number">299</span>  <span class="hljs-number">63.0</span>    <span class="hljs-number">287</span>    <span class="hljs-number">1341</span><br><br><span class="hljs-string">Percentage</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">requests</span> <span class="hljs-string">served</span> <span class="hljs-string">within</span> <span class="hljs-string">a</span> <span class="hljs-string">certain</span> <span class="hljs-string">time</span> <span class="hljs-string">(ms)</span><br>  <span class="hljs-number">50</span><span class="hljs-string">%</span>    <span class="hljs-number">287</span> <span class="hljs-comment"># 50%的请求在0.287秒内返回</span><br>  <span class="hljs-number">66</span><span class="hljs-string">%</span>    <span class="hljs-number">295</span><br>  <span class="hljs-number">75</span><span class="hljs-string">%</span>    <span class="hljs-number">303</span><br>  <span class="hljs-number">80</span><span class="hljs-string">%</span>    <span class="hljs-number">308</span><br>  <span class="hljs-number">90</span><span class="hljs-string">%</span>    <span class="hljs-number">332</span><br>  <span class="hljs-number">95</span><span class="hljs-string">%</span>    <span class="hljs-number">353</span><br>  <span class="hljs-number">98</span><span class="hljs-string">%</span>    <span class="hljs-number">375</span><br>  <span class="hljs-number">99</span><span class="hljs-string">%</span>    <span class="hljs-number">396</span><br> <span class="hljs-number">100</span><span class="hljs-string">%</span>   <span class="hljs-number">1341</span> <span class="hljs-string">(longest</span> <span class="hljs-string">request)</span><br></code></pre></td></tr></table></figure></li><li>post请求命令<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># post 命令</span><br><span class="hljs-string">ab</span> <span class="hljs-string">-n</span> <span class="hljs-number">100</span> <span class="hljs-string">-c</span> <span class="hljs-number">10</span> <span class="hljs-string">-r</span> <span class="hljs-string">-p</span> <span class="hljs-string">data</span> <span class="hljs-string">-T</span> <span class="hljs-string">&#x27;application/json&#x27;</span> <span class="hljs-string">http://127.0.0.1:8000/data-resource/</span><br><br><span class="hljs-attr">Server Software:</span>        <span class="hljs-string">WSGIServer/0.2</span><br><span class="hljs-attr">Server Hostname:</span>        <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br><span class="hljs-attr">Server Port:</span>            <span class="hljs-number">8000</span><br><br><span class="hljs-attr">Document Path:</span>          <span class="hljs-string">/data-resource/</span><br><span class="hljs-attr">Document Length:</span>        <span class="hljs-number">323</span> <span class="hljs-string">bytes</span><br><br><span class="hljs-attr">Concurrency Level:</span>      <span class="hljs-number">10</span><br><span class="hljs-attr">Time taken for tests:</span>   <span class="hljs-number">3.311</span> <span class="hljs-string">seconds</span><br><span class="hljs-attr">Complete requests:</span>      <span class="hljs-number">100</span><br><span class="hljs-attr">Failed requests:</span>        <span class="hljs-number">14</span> <span class="hljs-comment"># 因网络原因或服务器性能原因，发起的请求并不一定全部成功，通过该数值和Complete requests相除可以计算请求的失败率，作为测试结果的重要参考。</span><br>   <span class="hljs-string">(Connect:</span> <span class="hljs-number">0</span><span class="hljs-string">,</span> <span class="hljs-attr">Receive:</span> <span class="hljs-number">0</span><span class="hljs-string">,</span> <span class="hljs-attr">Length:</span> <span class="hljs-number">14</span><span class="hljs-string">,</span> <span class="hljs-attr">Exceptions:</span> <span class="hljs-number">0</span><span class="hljs-string">)</span><br><span class="hljs-attr">Total transferred:</span>      <span class="hljs-number">65714</span> <span class="hljs-string">bytes</span><br><span class="hljs-attr">Total body sent:</span>        <span class="hljs-number">43200</span><br><span class="hljs-attr">HTML transferred:</span>       <span class="hljs-number">32314</span> <span class="hljs-string">bytes</span><br><span class="hljs-attr">Requests per second:</span>    <span class="hljs-number">30.20</span> [<span class="hljs-comment">#/sec] (mean)</span><br><span class="hljs-attr">Time per request:</span>       <span class="hljs-number">331.081</span> [<span class="hljs-string">ms</span>] <span class="hljs-string">(mean)</span><br><span class="hljs-attr">Time per request:</span>       <span class="hljs-number">33.108</span> [<span class="hljs-string">ms</span>] <span class="hljs-string">(mean</span>, <span class="hljs-string">across</span> <span class="hljs-string">all</span> <span class="hljs-string">concurrent</span> <span class="hljs-string">requests)</span><br><span class="hljs-attr">Transfer rate:</span>          <span class="hljs-number">19.38</span> [<span class="hljs-string">Kbytes/sec</span>] <span class="hljs-string">received</span><br>                        <span class="hljs-number">12.74</span> <span class="hljs-string">kb/s</span> <span class="hljs-string">sent</span><br>                        <span class="hljs-number">32.13</span> <span class="hljs-string">kb/s</span> <span class="hljs-string">total</span><br><br><span class="hljs-string">Connection</span> <span class="hljs-string">Times</span> <span class="hljs-string">(ms)</span><br>              <span class="hljs-string">min</span>  <span class="hljs-string">mean</span>[<span class="hljs-string">+/-sd</span>] <span class="hljs-string">median</span>   <span class="hljs-string">max</span><br><span class="hljs-attr">Connect:</span>        <span class="hljs-number">0</span>    <span class="hljs-number">0</span>   <span class="hljs-number">0.1</span>      <span class="hljs-number">0</span>       <span class="hljs-number">1</span><br><span class="hljs-attr">Processing:</span>   <span class="hljs-number">272</span>  <span class="hljs-number">300</span>  <span class="hljs-number">18.8</span>    <span class="hljs-number">299</span>     <span class="hljs-number">342</span><br><span class="hljs-attr">Waiting:</span>      <span class="hljs-number">270</span>  <span class="hljs-number">296</span>  <span class="hljs-number">17.5</span>    <span class="hljs-number">296</span>     <span class="hljs-number">339</span><br><span class="hljs-attr">Total:</span>        <span class="hljs-number">272</span>  <span class="hljs-number">300</span>  <span class="hljs-number">18.8</span>    <span class="hljs-number">299</span>     <span class="hljs-number">342</span><br><br><span class="hljs-string">Percentage</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">requests</span> <span class="hljs-string">served</span> <span class="hljs-string">within</span> <span class="hljs-string">a</span> <span class="hljs-string">certain</span> <span class="hljs-string">time</span> <span class="hljs-string">(ms)</span><br>  <span class="hljs-number">50</span><span class="hljs-string">%</span>    <span class="hljs-number">299</span><br>  <span class="hljs-number">66</span><span class="hljs-string">%</span>    <span class="hljs-number">308</span><br>  <span class="hljs-number">75</span><span class="hljs-string">%</span>    <span class="hljs-number">316</span><br>  <span class="hljs-number">80</span><span class="hljs-string">%</span>    <span class="hljs-number">320</span><br>  <span class="hljs-number">90</span><span class="hljs-string">%</span>    <span class="hljs-number">326</span><br>  <span class="hljs-number">95</span><span class="hljs-string">%</span>    <span class="hljs-number">334</span><br>  <span class="hljs-number">98</span><span class="hljs-string">%</span>    <span class="hljs-number">339</span><br>  <span class="hljs-number">99</span><span class="hljs-string">%</span>    <span class="hljs-number">342</span><br> <span class="hljs-number">100</span><span class="hljs-string">%</span>    <span class="hljs-number">342</span> <span class="hljs-string">(longest</span> <span class="hljs-string">request)</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ab</tag>
      
      <tag>Web压测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Autotune</title>
    <link href="/2023/04/01/Autotune/"/>
    <url>/2023/04/01/Autotune/</url>
    
    <content type="html"><![CDATA[<h2 id="运行代码注意事项"><a href="#运行代码注意事项" class="headerlink" title="运行代码注意事项"></a>运行代码注意事项</h2><h3 id="1-安装Ubuntu-Packages"><a href="#1-安装Ubuntu-Packages" class="headerlink" title="1. 安装Ubuntu Packages"></a>1. 安装Ubuntu Packages</h3><ul><li>sudo apt-get install python3-pip python-dev python-mysqldb rabbitmq-server</li></ul><h3 id="2-安装requirments-txt"><a href="#2-安装requirments-txt" class="headerlink" title="2. 安装requirments.txt"></a>2. 安装requirments.txt</h3><ul><li>注意需要执行下面几个命令<ul><li>sudo apt-get install libpq-dev</li><li>sudo apt-get install libmysqlclient-dev</li><li>pip3 install -r requirements.txt</li></ul></li></ul><h2 id="论文内容"><a href="#论文内容" class="headerlink" title="论文内容"></a>论文内容</h2><h3 id="1-工作负载的表示"><a href="#1-工作负载的表示" class="headerlink" title="1. 工作负载的表示"></a>1. 工作负载的表示</h3><ul><li>工作负载：数据库的工作负载可以理解成数据库的工作特性，大的方向上工作负载有：OLTP、OLAP、HTAP，OLTP工作负载写请求多一些，查询较简单。OLAP工作负载读多一些，查询较负载。HTAP介于两者之间。合理的表示工作负载可以有效的优化系统</li><li>本文工作负载：<ol><li>利用数据库内部统计信息来描述工作负载</li><li>开始前删除所有统计信息，运行一个周期后记录统计信息，由于目前系统不知道每个metrics的作用，所以会将所有的信息以键值对的形式存储下来。</li><li>接下来要删除冗余的metrics，减少ML的搜索空间，有两种冗余的度量</li></ol><ul><li>一种是不同粒度的相同度量。（例如单位不同，比如mysql以字节和页为单位统计的数据量）</li><li>另一种是两个度量具有强相关性。</li><li>本文采用两种技术裁剪，一种是降维技术（因子分析FA），它会将DBMS的高维数据降为低维数据（聚类技术的预处理，减少了噪声）、另一种是聚类K-Mean技术，将低维数据聚合到有意义的组里。</li><li>FA技术<ul><li>输入：矩阵X，行代表metrics、列代表我们已经用过的knots，entry $$X_{ij} is value of metric i on configuration j.$$</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>论文分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Autotune</tag>
      
      <tag>AI4DB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MSCN论文总结</title>
    <link href="/2023/03/30/MSCN%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/"/>
    <url>/2023/03/30/MSCN%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="利用深度学习进行基数估计"><a href="#利用深度学习进行基数估计" class="headerlink" title="利用深度学习进行基数估计"></a>利用深度学习进行基数估计</h2><h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><ul><li>基于深度学习来作基数估计，设计了一种MSCN网络model</li><li>提升了0 Tuple问题的精确度（但没有完全解决0 Tuple 问题）</li><li>减少了连接join数量变多时的误差</li><li>使用真实世界IMDb数据集对方法进行了评估，结果表明该方法比基于采样的技术更稳健</li></ul><h3 id="需要解决的问题："><a href="#需要解决的问题：" class="headerlink" title="需要解决的问题："></a>需要解决的问题：</h3><ol><li>将查询作怎样的特征化</li><li>选择何种监督学习算法（设计了怎样的模型）</li><li>解决“冷启动问题”</li></ol><h4 id="将查询作怎样的特征化"><a href="#将查询作怎样的特征化" class="headerlink" title="将查询作怎样的特征化"></a>将查询作怎样的特征化</h4><p><img src="/img/query.png" alt="query"><br>我们设Q为查询的全集，$$v(a)表示对a进行one-hot编码，norm(a)表示对a进行标准化$$<br>$$ q \in Q, q&#x3D;(T_q, J_q, P_q)$$<br>$$ T_q&#x3D;(v(tid), v(samples)), samples可以代表表数量或bitmaps $$<br>$$J_q&#x3D;(v(join))$$<br>$$P_q&#x3D;(v(col), v(op), norm(val))$$</p><h4 id="模型MSCN"><a href="#模型MSCN" class="headerlink" title="模型MSCN"></a>模型MSCN</h4><p>对于每一个$$s \in S(S是query特征化后的集合)$$，使用MLP全连接多层神经网络学习，一次处理batch_size数量的查询，对模型输出的结果取平均值作为最终结果。<br>模型结果会输出一个标准化后的估计的基数，将其恢复为实际数据后与真实数据做比较（做除法）</p><h4 id="解决“冷启动问题”"><a href="#解决“冷启动问题”" class="headerlink" title="解决“冷启动问题”"></a>解决“冷启动问题”</h4><p>基于模式信息生成随机查询并从数据库中的实际值提取数据来获得初始训练数据集。</p><ol><li>随机选择一个数$$J_q(0 \le J_q \le 2)$$</li><li>随机选择一个至少关联一个其它表的表</li><li>对于$$|J_q|&gt;0$$, 选择一个新表，将join edge加入查询，重复$$J_q$$次</li><li>随机选择一个数$$P_q(0 \le P_q \le num non-key columns)$$, non-key columns非主键外键的列</li><li>生成$$P_q$$个predicate<br>Enriching the Training Data</li></ol><ul><li>Table特征化加入样本数据信息，比如samples的数量或bitmaps（table上对应的predicate）</li></ul><h3 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h3><p>使用了三种数据集</p><ol><li>synthetic workload：合成数据集，最多只有2个join</li><li>scale：0-4个join均有100个</li><li>JOB-light：Join order benchmark上的数据集<br><img src="/img/dataset.png" alt="dataset"></li></ol><h4 id="0-Tuple问题"><a href="#0-Tuple问题" class="headerlink" title="0-Tuple问题"></a>0-Tuple问题</h4><p><img src="/img/0-tuple.png" alt="0-tuple"></p><ul><li>0-tuple问题得到了优化，但是并没有彻底解决</li></ul><h4 id="有无samples数据对效果的影响"><a href="#有无samples数据对效果的影响" class="headerlink" title="有无samples数据对效果的影响"></a>有无samples数据对效果的影响</h4><p><img src="/img/sample.png" alt="sample"></p><h4 id="泛化能力的测试"><a href="#泛化能力的测试" class="headerlink" title="泛化能力的测试"></a>泛化能力的测试</h4><h4 id="存在的缺点："><a href="#存在的缺点：" class="headerlink" title="存在的缺点："></a>存在的缺点：</h4><ol><li>0-tuple问题不能完全解决</li><li>多表泛化能力不理想</li><li>不支持like等查询</li></ol>]]></content>
    
    
    <categories>
      
      <category>论文分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI4DB</tag>
      
      <tag>论文总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
